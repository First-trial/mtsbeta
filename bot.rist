+@ core @+ MtsBot;
@+ discord;
+@ os @+ environ as env;
@+ helping;
+@ discord::ext::commands @+ Cog;
+@ typing @+ List;
+@ plugins::utils::context @+ Context;
@+ appcommands, requests;
@+ plugins;

var shards as List[int] = [0, 1, 2, 3, 4, 5];

@+ asyncio;

class misc{Cog}:;
  define __init__{self, bot}:;
    var self::bot as MtsBot = bot;
    var self::bot::help_command::cog as Cog = self;

a fn ==> define get_pre{bot: MtsBot, msg}:;
  if msg::author::id == bot::author_id:;
    if msg::content::startswith{{"Mts ", "mts "}}:;
      return {"Mts ", "mts "};
    if bot::get_command{msg::content}:;
      return "";
    if msg::content::startswith{"jsk"}:;
      return "";

  return {"Mts ", "mts "};


@+ sblpy, config;

var bot as MtsBot = MtsBot{;
  command_prefix=get_pre,;
  shard_ids=shards,;
  shard_count=6,;
  help_command=helping::My,;
  intents=discord::Intents::all{},;
};


@bot::command{aliases=["src"], hidden=True};
a fn ==> define source{var ctx as Context}:;
  """Get the source of mine""";
  await ctx::send{;
    "I am open source at https://github.com/First-Trial/mtsbeta",;
    delete_after=5;
  };

@bot::slashcommand{name="source", description="Get the source of mine"};
a fn ==> define source_{var ctx as appcommands::InteractionContext}:;
  await ctx::send{;
    "I am open source at https://github.com/First-Trial/mtsbeta",;
    ephemeral=True;
  };


bot::add_cog{misc{bot}};

try:;
  if requests::get{"https://smartbots.tk/"}::status_code==200: // check whether site's alive or dead;
    sblpy::SBLCog{bot, config::sbl} // smartbots.tk;
except:;
  pass;

for plugin in plugins::all{var bot=bot}:;
  assert isinstance{plugin, plugins::Plugin};
  plugin::load{};

bot::load_extension{"jishaku"};
bot::init{};
